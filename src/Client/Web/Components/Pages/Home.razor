@page "/"
@using Blazored.FluentValidation
@using ExampleProject.Shared.Common.Endpoints
@using ExampleProject.Shared.Todo.Models

@inject ITodoApi TodoApi

<PageTitle>Home</PageTitle>

<div class="container">
    <h1>To-Do List</h1>
    <div class="form-container">
        <EditForm Model=newTodo OnValidSubmit=CreateTodo>
            <FluentValidationValidator />

            <label>Title: </label>
            <InputText @bind-Value=newTodo.Title />
            <ValidationMessage For=@(() => newTodo.Title) /><br>

            <label>Description: </label>
            <InputText @bind-Value=newTodo.Description />
            <ValidationMessage For=@(() => newTodo.Description) /><br>

            <label>Completed: </label>
            <InputCheckbox @bind-Value=newTodo.Completed />
            <ValidationMessage For=@(() => newTodo.Completed) /><br>

            <div class="action-buttons">
                <button type="submit">Save</button>
                <button type="button" @onclick=@(() => newTodo = new())>Clear</button>
            </div>
        </EditForm>
    </div>

    <table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Completed</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="todo-list">
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Title</td>
                    <td>@todo.Description</td>
                    <td><input type="checkbox" checked=@todo.Completed @onchange=@(e => ToggleCompleted(todo, e))></td>
                    <td>
                        <button type="button" class="delete-button" @onclick=@(() => Delete(todo.Id))>Delete</button>
                    </td>
                </tr>

            }
        </tbody>
    </table>

    <div class="refresh-button">
        <button type="button" @onclick=Refresh>Refresh List</button>
    </div>
</div>

@code {
    List<TodoDto> todos = new();

    TodoDto newTodo = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
        }
    }

    async Task Refresh()
    {
        todos = await TodoApi.GetTodos(new());

        await InvokeAsync(StateHasChanged);
    }

    async Task ToggleCompleted(TodoDto todo, ChangeEventArgs e)
    {
        todo.Completed = (bool)e.Value;

        await TodoApi.UpdateTodo(new(todo), new());

        await Refresh();
    }

    async Task Delete(int id)
    {
        await TodoApi.DeleteTodo(new(id), new());

        await Refresh();
    }

    async Task CreateTodo()
    {
        await TodoApi.CreateTodo(new(newTodo), new());

        await Refresh();

        newTodo = new();
    }
}